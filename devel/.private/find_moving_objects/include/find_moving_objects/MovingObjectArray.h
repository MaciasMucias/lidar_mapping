// Generated by gencpp from file find_moving_objects/MovingObjectArray.msg
// DO NOT EDIT!


#ifndef FIND_MOVING_OBJECTS_MESSAGE_MOVINGOBJECTARRAY_H
#define FIND_MOVING_OBJECTS_MESSAGE_MOVINGOBJECTARRAY_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <find_moving_objects/MovingObject.h>

namespace find_moving_objects
{
template <class ContainerAllocator>
struct MovingObjectArray_
{
  typedef MovingObjectArray_<ContainerAllocator> Type;

  MovingObjectArray_()
    : origin_node_name()
    , objects()  {
    }
  MovingObjectArray_(const ContainerAllocator& _alloc)
    : origin_node_name(_alloc)
    , objects(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _origin_node_name_type;
  _origin_node_name_type origin_node_name;

   typedef std::vector< ::find_moving_objects::MovingObject_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::find_moving_objects::MovingObject_<ContainerAllocator> >::other >  _objects_type;
  _objects_type objects;





  typedef boost::shared_ptr< ::find_moving_objects::MovingObjectArray_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::find_moving_objects::MovingObjectArray_<ContainerAllocator> const> ConstPtr;

}; // struct MovingObjectArray_

typedef ::find_moving_objects::MovingObjectArray_<std::allocator<void> > MovingObjectArray;

typedef boost::shared_ptr< ::find_moving_objects::MovingObjectArray > MovingObjectArrayPtr;
typedef boost::shared_ptr< ::find_moving_objects::MovingObjectArray const> MovingObjectArrayConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::find_moving_objects::MovingObjectArray_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::find_moving_objects::MovingObjectArray_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace find_moving_objects

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'find_moving_objects': ['/home/plugit/lidar_mapping/src/find_moving_objects/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::find_moving_objects::MovingObjectArray_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::find_moving_objects::MovingObjectArray_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::find_moving_objects::MovingObjectArray_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::find_moving_objects::MovingObjectArray_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::find_moving_objects::MovingObjectArray_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::find_moving_objects::MovingObjectArray_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::find_moving_objects::MovingObjectArray_<ContainerAllocator> >
{
  static const char* value()
  {
    return "61dd63363b01476d95238afd8aff090e";
  }

  static const char* value(const ::find_moving_objects::MovingObjectArray_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x61dd63363b01476dULL;
  static const uint64_t static_value2 = 0x95238afd8aff090eULL;
};

template<class ContainerAllocator>
struct DataType< ::find_moving_objects::MovingObjectArray_<ContainerAllocator> >
{
  static const char* value()
  {
    return "find_moving_objects/MovingObjectArray";
  }

  static const char* value(const ::find_moving_objects::MovingObjectArray_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::find_moving_objects::MovingObjectArray_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# The name of the ROS node sending this message.\n\
string origin_node_name\n\
\n\
# The objects themselves are stored in an array\n\
# (i.e. a vector). The number of elements in the \n\
# array is obtained using objects.size() in C++.\n\
MovingObject[] objects\n\
================================================================================\n\
MSG: find_moving_objects/MovingObject\n\
# stamp is the time at which the sensor scanned this \n\
# object. \n\
# frame_id is the frame (i.e. coordinate system) of the \n\
# sensor - this is the frame in which the given relative \n\
# information below (the variables position, velocity, \n\
# speed, angle_* etc.) is valid.\n\
# seq is not really used.\n\
Header header\n\
\n\
# The frame which is considered world-fixed and never \n\
# moves. Note that the robot's position in this frame \n\
# can be discontinuous.\n\
# The variables *_in_map_frame below are specified in \n\
# this frame.\n\
string map_frame\n\
\n\
# The frame in which the movement of the robot is always\n\
# continuous and in which all transforms are made.\n\
# The variables *_in_fixed_frame below are \n\
# specified in this frame.\n\
string fixed_frame\n\
\n\
# The frame which is considered fixed on the robot and \n\
# in which the variables *_in_base_frame below are\n\
# specified.\n\
string base_frame\n\
\n\
# The width of the object as seen by the given \n\
# sensor (calculated based on angle_begin, angle_end,\n\
# distance_angle_begin and distance_angle_end as \n\
# given below using the law of cosine).\n\
float64 seen_width\n\
\n\
# In frame header.frame_id, angles are measured around \n\
# the positive Z axis (counterclockwise; Z is pointing up)\n\
# with zero angle being forward along the x axis, provided\n\
# that the frame is not an optical/camera frame.\n\
# In case of an optical frame (Z is pointing forward and Y\n\
# is pointing down), then angles are measured around the \n\
# negative Y axis.\n\
# The angles given specify where the object is to be\n\
# found in the frame header.frame_id (this is thus \n\
# relative to the X-axis of the sensor in a regular frame\n\
# and relative the Z-axis, but negated, in an optical frame).\n\
float64 angle_begin\n\
float64 angle_end\n\
\n\
# The scanned distances to the object's end points as \n\
# specified by angle_begin and angle_end.\n\
float64 distance_at_angle_begin\n\
float64 distance_at_angle_end\n\
\n\
# The averaged distance (approximated to be at \n\
# (angle_begin+angle_end)/2) from the sensor to the seen\n\
# object.\n\
float64 distance\n\
\n\
# Position and velocity of the object.\n\
geometry_msgs/Point position_in_map_frame\n\
geometry_msgs/Point position_in_fixed_frame\n\
geometry_msgs/Point position_in_base_frame\n\
geometry_msgs/Point position\n\
geometry_msgs/Vector3 velocity_in_map_frame\n\
geometry_msgs/Vector3 velocity_in_fixed_frame\n\
geometry_msgs/Vector3 velocity_in_base_frame\n\
geometry_msgs/Vector3 velocity\n\
\n\
# For convenience, the normalized velocity vector is\n\
# also given, along with the scale factor (speed).\n\
geometry_msgs/Vector3 velocity_normalized_in_map_frame\n\
geometry_msgs/Vector3 velocity_normalized_in_fixed_frame\n\
geometry_msgs/Vector3 velocity_normalized_in_base_frame\n\
geometry_msgs/Vector3 velocity_normalized\n\
float64 speed_in_map_frame\n\
float64 speed_in_fixed_frame\n\
float64 speed_in_base_frame\n\
float64 speed\n\
\n\
# The point on the object closest to the sensor.\n\
geometry_msgs/Point closest_point_in_map_frame\n\
geometry_msgs/Point closest_point_in_fixed_frame\n\
geometry_msgs/Point closest_point_in_base_frame\n\
geometry_msgs/Point closest_point\n\
\n\
# For convenience, the distance from the sensor to the \n\
# closest point on the object and at what angle it is to \n\
# be found in relation to the sensor (i.e. \n\
# header.frame_id).\n\
float64 closest_distance\n\
float64 angle_for_closest_distance\n\
\n\
# A measure on how confident the sending node is about \n\
# the specified information.\n\
float64 confidence\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Vector3\n\
# This represents a vector in free space. \n\
# It is only meant to represent a direction. Therefore, it does not\n\
# make sense to apply a translation to it (e.g., when applying a \n\
# generic rigid transformation to a Vector3, tf2 will only apply the\n\
# rotation). If you want your data to be translatable too, use the\n\
# geometry_msgs/Point message instead.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
";
  }

  static const char* value(const ::find_moving_objects::MovingObjectArray_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::find_moving_objects::MovingObjectArray_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.origin_node_name);
      stream.next(m.objects);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct MovingObjectArray_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::find_moving_objects::MovingObjectArray_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::find_moving_objects::MovingObjectArray_<ContainerAllocator>& v)
  {
    s << indent << "origin_node_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.origin_node_name);
    s << indent << "objects[]" << std::endl;
    for (size_t i = 0; i < v.objects.size(); ++i)
    {
      s << indent << "  objects[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::find_moving_objects::MovingObject_<ContainerAllocator> >::stream(s, indent + "    ", v.objects[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // FIND_MOVING_OBJECTS_MESSAGE_MOVINGOBJECTARRAY_H
